-- Ejemplo de tabla particionada y clusterizada
CREATE OR REPLACE TABLE `project_id.dataset.transactions_optimized`
PARTITION BY DATE(transaction_date)
CLUSTER BY user_id, transaction_type
AS SELECT
  transaction_id,
  user_id,
  transaction_type,
  amount,
  transaction_date,
  status,
  metadata
FROM `project_id.dataset.transactions_original`;

-- Política de particionamiento para datos históricos
CREATE OR REPLACE TABLE `project_id.dataset.historical_data`
PARTITION BY
  DATE_TRUNC(date_column, MONTH)
OPTIONS(
  partition_expiration_days = 365,
  require_partition_filter = true
);

-- Particionamiento para datos numéricos
CREATE OR REPLACE TABLE `project_id.dataset.user_segments`
PARTITION BY RANGE_BUCKET(user_score, GENERATE_ARRAY(0, 100, 10));

-- Configuración de expiración de datos
ALTER TABLE `project_id.dataset.daily_metrics`
SET OPTIONS (
  partition_expiration_days = 90,
  require_partition_filter = true

-- Exportación de datos antiguos a Cloud Storage
EXPORT DATA
OPTIONS(
  uri='gs://archive-bucket/historical/*.avro',
  format='AVRO',
  overwrite=true
) AS
SELECT *
FROM `project_id.dataset.daily_metrics`
WHERE date < DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR);

-- Creación de vistas materializadas para consultas frecuentes
CREATE MATERIALIZED VIEW `project_id.dataset.daily_summaries`
AS SELECT
  DATE(timestamp) as date,
  COUNT(*) as total_transactions,
  SUM(amount) as total_amount,
  AVG(amount) as avg_amount
FROM `project_id.dataset.transactions`
GROUP BY date;

-- Ejemplo de consulta optimizada con particionamiento
SELECT
  user_id,
  COUNT(*) as transaction_count,
  SUM(amount) as total_amount
FROM `project_id.dataset.transactions`
WHERE DATE(transaction_date) BETWEEN DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY)
  AND CURRENT_DATE()
GROUP BY user_id
HAVING transaction_count > 5;

-- Procedimiento para limpieza de datos
CREATE OR REPLACE PROCEDURE `project_id.dataset.cleanup_procedure`()
BEGIN
  -- Eliminar registros duplicados
  CREATE OR REPLACE TABLE `project_id.dataset.transactions_deduped`
  AS SELECT DISTINCT *
  FROM `project_id.dataset.transactions`;
  
  -- Actualizar tabla principal
  CREATE OR REPLACE TABLE `project_id.dataset.transactions`
  AS SELECT * FROM `project_id.dataset.transactions_deduped`;
END;

-- Monitoreo de uso de slots
SELECT
  job_id,
  total_slot_ms,
  total_bytes_processed,
  creation_time
FROM `region-us`.INFORMATION_SCHEMA.JOBS_BY_PROJECT
WHERE creation_time >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 24 HOUR)
ORDER BY total_slot_ms DESC
LIMIT 10;

-- Análisis de costos por consulta
SELECT
  user_email,
  COUNT(*) as query_count,
  SUM(total_bytes_processed)/1024/1024/1024 as gb_processed
FROM `region-us`.INFORMATION_SCHEMA.JOBS_BY_USER
WHERE creation_time >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 30 DAY)
GROUP BY user_email
ORDER BY gb_processed DESC;
);

Optimización de Estructura de Datos y BigQuery-- Tabla particionada y clusterizada
CREATE OR REPLACE TABLE proyecto.dataset.tabla_optimizada
PARTITION BY DATE(fecha_evento)
CLUSTER BY usuario_id, tipo_evento
OPTIONS(
partition_expiration_days = 90,
require_partition_filter = true
);
-- Vista materializada para análisis frecuentes
CREATE MATERIALIZED VIEW proyecto.dataset.mv_analisis_diario
AS SELECT
DATE(fecha_evento) as fecha,
COUNT(*) as total_eventos,
COUNT(DISTINCT usuario_id) as usuarios_unicos
FROM proyecto.dataset.tabla_optimizada
GROUP BY fecha;

Optimización de Estructura de Datos y BigQuery-- Tabla particionada y clusterizada
CREATE OR REPLACE TABLE proyecto.dataset.tabla_optimizada
PARTITION BY DATE(fecha_evento)
CLUSTER BY usuario_id, tipo_evento
OPTIONS(
partition_expiration_days = 90,
require_partition_filter = true
);
-- Vista materializada para análisis frecuentes
CREATE MATERIALIZED VIEW proyecto.dataset.mv_analisis_diario
AS SELECT
DATE(fecha_evento) as fecha,
COUNT(*) as total_eventos,
COUNT(DISTINCT usuario_id) as usuarios_unicos
FROM proyecto.dataset.tabla_optimizada
GROUP BY fecha;

-- Ejemplo de tabla particionada y clusterizada
CREATE OR REPLACE TABLE proyecto.dataset.transacciones_optimizadas
PARTITION BY DATE(fecha_transaccion)
CLUSTER BY usuario_id, tipo_transaccion
OPTIONS(
partition_expiration_days = 90,
require_partition_filter = true
) AS
SELECT * FROM proyecto.dataset.transacciones;
-- Vista materializada para reportes frecuentes
CREATE MATERIALIZED VIEW proyecto.dataset.mv_metricas_diarias
AS SELECT
DATE(fecha_transaccion) as fecha,
tipo_transaccion,
COUNT(*) as total_transacciones,
SUM(monto) as monto_total,
COUNT(DISTINCT usuario_id) as usuarios_unicos
FROM proyecto.dataset.transacciones_optimizadas
GROUP BY fecha, tipo_transaccion;

-- Particionamiento por fecha con clustering
CREATE OR REPLACE TABLE project.dataset.events_optimized
PARTITION BY DATE(timestamp)
CLUSTER BY user_id, event_type
OPTIONS(
partition_expiration_days = 90,
require_partition_filter = true
) AS SELECT * FROM project.dataset.events;
-- Vista materializada para análisis frecuentes
CREATE MATERIALIZED VIEW project.dataset.daily_metrics
AS SELECT
DATE(timestamp) as date,
user_id,
COUNT(*) as events_count,
SUM(value) as total_value
FROM project.dataset.events_optimized
GROUP BY 1, 2;
-- Política de retención
CREATE OR REPLACE TABLE project.dataset.events_archive
PARTITION BY DATE(timestamp)
OPTIONS(
partition_expiration_days = 365
) AS SELECT * FROM project.dataset.events_optimized
WHERE DATE(timestamp) < DATE_SUB(CURRENT_DATE(), INTERVAL 90 DAY);
